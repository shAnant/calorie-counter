# -*- coding: utf-8 -*-
"""Untitled1.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1vgmjoLr_uaEKQ9ZIeKFtKmC_dFsYOnEm
"""

from google.colab import files
files.upload()

!pip install kaggle

!kaggle datasets download -d kritikseth/fruit-and-vegetable-image-recognition

!unzip fruit-and-vegetable-image-recognition.zip -d /content/fruits-and-vegetable-data

import numpy as np
import pandas as pd
import pathlib as path
import matplotlib.pyplot as plt
import os.path
import tensorflow as tf
from tensorflow.keras.preprocessing.image import ImageDataGenerator

train_dir = path.Path('/content/fruits-and-vegetable-data/train')
test_dir = path.Path('/content/fruits-and-vegetable-data/test')
val_dir = path.Path('/content/fruits-and-vegetable-data/validation')
train_filepath =  list(train_dir.glob('*/*.jpg'))
test_filepath = list(test_dir.glob('*/*.jpg'))
val_filepath = list(val_dir.glob('*/*.jpg'))

def image_processing(filepath):
  labels = [str(filepath[i]).split("/")[-2] \
            for i in range(len(filepath))]
  filepath = pd.Series(filepath, name='Filepath').astype(str)
  labels = pd.Series(labels, name='Label')
  df = pd.concat([filepath, labels], axis=1)
  df = df.sample(frac=1).reset_index(drop = True)
  return df

train_df = image_processing(train_filepath)
test_df = image_processing(test_filepath)
val_df = image_processing(val_filepath)

print('--training set--\n')
print(f'Total number of examples: {len(train_df)}')
print(f'Number of labels: {len(train_df.Label.unique())}')

train_df.head(5)

df_unique = train_df.copy()
df_unique = df_unique.sample(frac=1).reset_index(drop=True)
df_unique = df_unique.drop_duplicates(subset='Label').reset_index(drop=True)

fig , axes = plt.subplots(nrows=1, ncols=10, figsize=(20,20))
for i,ax in enumerate(axes.flat):
  ax.imshow(plt.imread(df_unique.Filepath[i]))
  ax.set_title(df_unique.Label[i])
plt.tight_layout()
plt.show()

train_generator = ImageDataGenerator(preprocessing_function=tf.keras.applications.mobilenet_v2.preprocess_input)
test_generator = ImageDataGenerator(preprocessing_function=tf.keras.applications.mobilenet_v2.preprocess_input)

train_images = train_generator.flow_from_dataframe(
    dataframe=train_df,
    x_col='Filepath',
    y_col='Label',
    target_size=(224, 224),
    color_mode='rgb',
    class_mode='categorical',
    batch_size=32,
    shuffle=True,
    seed=0,
    rotation_range=30,
    zoom_range=0.15,
    width_shift_range=0.2,
    height_shift_range=0.2,
    shape_eager_fallback=True,
    horizontal_flip=True,
    vertical_flip=True,
    fill_mode="nearest"
)

val_images = train_generator.flow_from_dataframe(
    dataframe=val_df,
    x_col='Filepath',
    y_col='Label',
    target_size=(224, 224),
    color_mode='rgb',
    class_mode='categorical',
    batch_size=32,
    shuffle=True,
    seed=0,
    shape_eager_fallback=True,
    rotation_range=30,
    zoom_range=0.15,
    width_shift_range=0.2,
    height_shift_range=0.2,
    horizontal_flip=True,
    vertical_flip=True,
    fill_mode="nearest"
)

test_images = test_generator.flow_from_dataframe(
    dataframe=test_df,
    x_col='Filepath',
    y_col='Label',
    target_size=(224, 224),
    color_mode='rgb',
    class_mode='categorical',
    batch_size=32,
    shuffle=False,
    shape_eager_fallback=True
)

pretrained_model = tf.keras.applications.MobileNetV2(
    input_shape=(224, 224, 3),
    include_top=False,
    weights='imagenet',
    pooling='avg'
)
pretrained_model.trainable = False

inputs = pretrained_model.input
x = tf.keras.layers.Dense(128, activation='relu')(pretrained_model.output)
x = tf.keras.layers.Dense(128, activation='relu')(x)
outputs = tf.keras.layers.Dense(36, activation='softmax')(x)
model = tf.keras.Model(inputs=inputs, outputs=outputs)
model.compile(
    optimizer='adam',
    loss='categorical_crossentropy',
    metrics=['accuracy']
)
history = model.fit(
    train_images,
    validation_data=val_images,
    batch_size = 32,
    epochs=5,
    callbacks=[
        tf.keras.callbacks.EarlyStopping(
            monitor='val_loss',
            patience=2,
            restore_best_weights=True
        )
    ]
)

pred = model.predict(test_images)
pred = np.argmax(pred,axis=1)
labels = (train_images.class_indices)
labels = dict((v,k) for k,v in labels.items())
pred1 = [labels[k] for k in pred]
pred1
#

def output(location):
  img = tf.keras.preprocessing.image.load_img(
      location, target_size=(224, 224)
  )
  img_array = tf.keras.preprocessing.image.img_to_array(img)
  img_array = tf.expand_dims(img_array, 0)
  img_array = tf.keras.applications.mobilenet_v2.preprocess_input(img_array)
  predictions = model.predict(img_array)
  predicted_class = labels[np.argmax(predictions[0], axis=-1)]
  return predicted_class

!pip install streamlit

import requests
import streamlit as st
from bs4 import BeautifulSoup
def fetch_calories(prediction):
    try:
        url = 'https://www.google.com/search?&q=calories in ' + prediction
        req = requests.get(url).text
        scrap = BeautifulSoup(req, 'html.parser')
        calories = scrap.find("div", class_="BNeawe iBp4i AP7Wnd").text
        return calories
    except Exception as e:
        st.error("Can't able to fetch the Calories")
        print(e)

img = output('/content/images.jpg')
print(img)
cal = fetch_calories(img)
print(cal)

model.save('model.keras')